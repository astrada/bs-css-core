// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function join(separator, strings) {
  var _acc = "";
  var _strings = strings;
  while(true) {
    var strings$1 = _strings;
    var acc = _acc;
    if (strings$1) {
      var xs = strings$1[1];
      var x = strings$1[0];
      if (xs) {
        if (xs[1]) {
          _strings = xs;
          _acc = acc + (x + separator);
          continue ;
        } else {
          var y = xs[0];
          if (y.length === 0) {
            return acc + x;
          } else if (x.length === 0) {
            return acc + y;
          } else {
            return acc + (x + (separator + y));
          }
        }
      } else {
        return acc + x;
      }
    } else {
      return acc;
    }
  };
}

function makeDict(ruleset) {
  var toJs = function (rule) {
    if (typeof rule === "number") {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "Css.re",
              40,
              11
            ]
          ];
    } else {
      var variant = rule[0];
      if (variant !== -434952966) {
        if (variant !== 829240095) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "Css.re",
                  40,
                  11
                ]
              ];
        } else {
          var match = rule[1];
          return /* tuple */[
                  match[0],
                  makeDict(match[1])
                ];
        }
      } else {
        var match$1 = rule[1];
        return /* tuple */[
                match$1[0],
                match$1[1]
              ];
      }
    }
  };
  return Js_dict.fromList(List.map(toJs, ruleset));
}

function keyframes(keyframes$1) {
  var ruleset = List.map((function (param) {
          return /* `selector */[
                  829240095,
                  /* tuple */[
                    String(param[0]) + "%",
                    param[1]
                  ]
                ];
        }), keyframes$1);
  return /* `selector */[
          829240095,
          /* tuple */[
            "animationName",
            ruleset
          ]
        ];
}

var style = makeDict;

function animationBody(animation) {
  return style(animation[1][1]);
}

function d(property, value) {
  return /* `declaration */[
          -434952966,
          /* tuple */[
            property,
            value
          ]
        ];
}

function func1(name, arg) {
  return name + ("(" + (arg + ")"));
}

function func2(name, arg, arg$prime) {
  return name + ("(" + (arg + (", " + (arg$prime + ")"))));
}

function funcAny(name, args) {
  return name + ("(" + (join(", ", args) + ")"));
}

function string_of_float(f) {
  return "" + (String(f) + "");
}

function important(v) {
  if (typeof v === "number" || v[0] !== -434952966) {
    return v;
  } else {
    var match = v[1];
    return /* `declaration */[
            -434952966,
            /* tuple */[
              match[0],
              match[1] + " !important"
            ]
          ];
  }
}

function label(label$1) {
  return /* `declaration */[
          -434952966,
          /* tuple */[
            "label",
            label$1
          ]
        ];
}

function string_of_angle(param) {
  var variant = param[0];
  if (variant >= 4995526) {
    if (variant >= 5690837) {
      return string_of_float(param[1]) + "rad";
    } else {
      return String(param[1]) + "deg";
    }
  } else if (variant >= -855250051) {
    return string_of_float(param[1]) + "turn";
  } else {
    return string_of_float(param[1]) + "grad";
  }
}

function deg(x) {
  return /* `deg */[
          4995526,
          x
        ];
}

function rad(x) {
  return /* `rad */[
          5690837,
          x
        ];
}

function grad(x) {
  return /* `grad */[
          -999567410,
          x
        ];
}

function turn(x) {
  return /* `turn */[
          -855250051,
          x
        ];
}

function string_of_color(param) {
  if (typeof param === "number") {
    if (param >= 582626130) {
      return "transparent";
    } else {
      return "currentColor";
    }
  } else {
    var variant = param[0];
    if (variant !== -878128972) {
      if (variant >= 5197569) {
        if (variant >= 5692173) {
          var match = param[1];
          return "rgb(" + (join(", ", /* :: */[
                        String(match[0]),
                        /* :: */[
                          String(match[1]),
                          /* :: */[
                            String(match[2]),
                            /* [] */0
                          ]
                        ]
                      ]) + ")");
        } else {
          var match$1 = param[1];
          return "hsl(" + (join(", ", /* :: */[
                        String(match$1[0]),
                        /* :: */[
                          String(match$1[1]) + "%",
                          /* :: */[
                            String(match$1[2]) + "%",
                            /* [] */0
                          ]
                        ]
                      ]) + ")");
        }
      } else if (variant >= 5194459) {
        return "#" + param[1];
      } else {
        var match$2 = param[1];
        return "hsla(" + (join(", ", /* :: */[
                      String(match$2[0]),
                      /* :: */[
                        String(match$2[1]) + "%",
                        /* :: */[
                          String(match$2[2]) + "%",
                          /* :: */[
                            string_of_float(match$2[3]),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]) + ")");
      }
    } else {
      var match$3 = param[1];
      return "rgba(" + (join(", ", /* :: */[
                    String(match$3[0]),
                    /* :: */[
                      String(match$3[1]),
                      /* :: */[
                        String(match$3[2]),
                        /* :: */[
                          string_of_float(match$3[3]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]) + ")");
    }
  }
}

function rgb(r, g, b) {
  return /* `rgb */[
          5692173,
          /* tuple */[
            r,
            g,
            b
          ]
        ];
}

function rgba(r, g, b, a) {
  return /* `rgba */[
          -878128972,
          /* tuple */[
            r,
            g,
            b,
            a
          ]
        ];
}

function hsl(h, s, l) {
  return /* `hsl */[
          5197569,
          /* tuple */[
            h,
            s,
            l
          ]
        ];
}

function hsla(h, s, l, a) {
  return /* `hsla */[
          -988425664,
          /* tuple */[
            h,
            s,
            l,
            a
          ]
        ];
}

function hex(x) {
  return /* `hex */[
          5194459,
          x
        ];
}

function string_of_stops(stops) {
  return join(", ", List.map((function (param) {
                    return join(" ", /* :: */[
                                string_of_color(param[1]),
                                /* :: */[
                                  String(param[0]) + "%",
                                  /* [] */0
                                ]
                              ]);
                  }), stops));
}

function linearGradient(angle, stops) {
  return /* `linearGradient */[
          616379637,
          /* tuple */[
            angle,
            stops
          ]
        ];
}

function repeatingLinearGradient(angle, stops) {
  return /* `repeatingLinearGradient */[
          -160280644,
          /* tuple */[
            angle,
            stops
          ]
        ];
}

function radialGradient(stops) {
  return /* `radialGradient */[
          119548911,
          stops
        ];
}

function repeatingRadialGradient(stops) {
  return /* `repeatingRadialGradient */[
          -657111370,
          stops
        ];
}

function string_of_length(param) {
  if (typeof param === "number") {
    return "0";
  } else {
    var variant = param[0];
    if (variant >= 22643) {
      if (variant >= 25096) {
        if (variant >= 26433) {
          if (variant >= 5691738) {
            return string_of_float(param[1]) + "rem";
          } else {
            return string_of_float(param[1]) + "vw";
          }
        } else if (variant >= 26418) {
          return string_of_float(param[1]) + "vh";
        } else {
          return String(param[1]) + "px";
        }
      } else if (variant !== 24416) {
        if (variant >= 25092) {
          return String(param[1]) + "pt";
        } else {
          return string_of_float(param[1]) + "ex";
        }
      } else {
        return string_of_float(param[1]) + "mm";
      }
    } else if (variant >= -119887163) {
      if (variant >= 22186) {
        if (variant >= 22632) {
          return string_of_float(param[1]) + "em";
        } else {
          return string_of_float(param[1]) + "cm";
        }
      } else if (variant >= 22181) {
        return string_of_float(param[1]) + "ch";
      } else {
        return string_of_float(param[1]) + "%";
      }
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        return string_of_float(param[1]) + "vmin";
      } else {
        var match = param[1];
        if (match[0] >= 5745024) {
          return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
        } else {
          return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
        }
      }
    } else {
      return string_of_float(param[1]) + "vmax";
    }
  }
}

function ch(x) {
  return /* `ch */[
          22181,
          x
        ];
}

function cm(x) {
  return /* `cm */[
          22186,
          x
        ];
}

function em(x) {
  return /* `em */[
          22632,
          x
        ];
}

function ex(x) {
  return /* `ex */[
          22643,
          x
        ];
}

function fr(x) {
  return /* `fr */[
          22860,
          x
        ];
}

function mm(x) {
  return /* `mm */[
          24416,
          x
        ];
}

function pct(x) {
  return /* `percent */[
          -119887163,
          x
        ];
}

function pt(x) {
  return /* `pt */[
          25092,
          x
        ];
}

function px(x) {
  return /* `px */[
          25096,
          x
        ];
}

function rem(x) {
  return /* `rem */[
          5691738,
          x
        ];
}

function vh(x) {
  return /* `vh */[
          26418,
          x
        ];
}

function vmax(x) {
  return /* `vmax */[
          -833472530,
          x
        ];
}

function vmin(x) {
  return /* `vmin */[
          -833470756,
          x
        ];
}

function vw(x) {
  return /* `vw */[
          26433,
          x
        ];
}

function $neg(a, b) {
  return /* `calc */[
          -1044768619,
          /* tuple */[
            /* sub */5745024,
            a,
            b
          ]
        ];
}

function $plus(a, b) {
  return /* `calc */[
          -1044768619,
          /* tuple */[
            /* add */4846113,
            a,
            b
          ]
        ];
}

var Calc = /* module */[
  /* - */$neg,
  /* + */$plus
];

function size(x, y) {
  return /* `size */[
          -866934591,
          /* tuple */[
            x,
            y
          ]
        ];
}

function count(x) {
  return /* `count */[
          -899463985,
          x
        ];
}

function cubicBesier(a, b, c, d) {
  return /* `cubicBezier */[
          -554785527,
          /* tuple */[
            a,
            b,
            c,
            d
          ]
        ];
}

function localUrl(x) {
  return /* `localUrl */[
          -538079548,
          x
        ];
}

function rotate(a) {
  return /* `rotate */[
          -887077285,
          a
        ];
}

function rotate3d(x, y, z, a) {
  return /* `rotate3d */[
          142802924,
          /* tuple */[
            x,
            y,
            z,
            a
          ]
        ];
}

function rotateX(a) {
  return /* `rotateX */[
          -249738851,
          a
        ];
}

function rotateY(a) {
  return /* `rotateY */[
          -249738850,
          a
        ];
}

function rotateZ(a) {
  return /* `rotateZ */[
          -249738849,
          a
        ];
}

function scale(x, y) {
  return /* `scale */[
          -120664438,
          /* tuple */[
            x,
            y
          ]
        ];
}

function scale3d(x, y, z) {
  return /* `scale3d */[
          -452513317,
          /* tuple */[
            x,
            y,
            z
          ]
        ];
}

function scaleX(x) {
  return /* `scaleX */[
          1009117838,
          x
        ];
}

function scaleY(x) {
  return /* `scaleY */[
          1009117839,
          x
        ];
}

function scaleZ(x) {
  return /* `scaleZ */[
          1009117840,
          x
        ];
}

function skew(x, y) {
  return /* `skew */[
          -866839798,
          /* tuple */[
            x,
            y
          ]
        ];
}

function skewX(a) {
  return /* `skewX */[
          -31746546,
          a
        ];
}

function skewY(a) {
  return /* `skewY */[
          -31746545,
          a
        ];
}

function steps(i, dir) {
  return /* `steps */[
          68058023,
          /* tuple */[
            i,
            dir
          ]
        ];
}

function translate(x, y) {
  return /* `translate */[
          -914368690,
          /* tuple */[
            x,
            y
          ]
        ];
}

function translate3d(x, y, z) {
  return /* `translate3d */[
          178189215,
          /* tuple */[
            x,
            y,
            z
          ]
        ];
}

function translateX(x) {
  return /* `translateX */[
          106728778,
          x
        ];
}

function translateY(y) {
  return /* `translateY */[
          106728779,
          y
        ];
}

function translateZ(z) {
  return /* `translateZ */[
          106728780,
          z
        ];
}

function url(x) {
  return /* `url */[
          5843823,
          x
        ];
}

function display(x) {
  return d("display", x >= 53323314 ? (
                x >= 423610969 ? (
                    x >= 888960333 ? "block" : "inline"
                  ) : (
                    x >= 64712127 ? "inline-grid" : "inline-flex"
                  )
              ) : (
                x >= -922086728 ? (
                    x >= -147785676 ? "inline-block" : "none"
                  ) : (
                    x >= -999565626 ? "grid" : "flex"
                  )
              ));
}

function position(x) {
  return d("position", x !== 10615156 ? (
                x >= 188263721 ? (
                    x >= 903134412 ? "relative" : "sticky"
                  ) : (
                    x >= 100392110 ? "static" : "absolute"
                  )
              ) : "fixed");
}

function top(x) {
  return d("top", string_of_length(x));
}

function bottom(x) {
  return d("bottom", string_of_length(x));
}

function left(x) {
  return d("left", string_of_length(x));
}

function right(x) {
  return d("right", string_of_length(x));
}

function flex(x) {
  return d("flex", String(x));
}

function flexGrow(x) {
  return d("flexGrow", String(x));
}

function flexShrink(x) {
  return d("flexShrink", String(x));
}

function flexBasis(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= -550577721 ? (
        x >= 60557045 ? (
            x >= 427265337 ? "content" : "max-content"
          ) : (
            x >= -195805336 ? "fit-content" : "min-content"
          )
      ) : (
        x !== -1011102077 ? (
            x >= -789508312 ? "0" : "auto"
          ) : "fill"
      );
  } else {
    var variant = x[0];
    if (variant >= 22643) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? string_of_float(x[1]) + "rem" : string_of_float(x[1]) + "vw"
            ) : (
              variant >= 26418 ? string_of_float(x[1]) + "vh" : String(x[1]) + "px"
            )
        ) : (
          variant !== 24416 ? (
              variant >= 25092 ? String(x[1]) + "pt" : string_of_float(x[1]) + "ex"
            ) : string_of_float(x[1]) + "mm"
        );
    } else if (variant >= -119887163) {
      tmp = variant >= 22186 ? (
          variant >= 22632 ? string_of_float(x[1]) + "em" : string_of_float(x[1]) + "cm"
        ) : (
          variant >= 22181 ? string_of_float(x[1]) + "ch" : string_of_float(x[1]) + "%"
        );
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        tmp = string_of_float(x[1]) + "vmin";
      } else {
        var match = x[1];
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = string_of_float(x[1]) + "vmax";
    }
  }
  return d("flexBasis", tmp);
}

function flexDirection(x) {
  return d("flexDirection", x >= 135477484 ? (
                x >= 378951208 ? "row-reverse" : "column-reverse"
              ) : (
                x >= 5693978 ? "row" : "column"
              ));
}

function flexWrap(x) {
  return d("flexWrap", x !== -463121288 ? (
                x >= 867913355 ? "nowrap" : "wrap"
              ) : "wrap-reverse");
}

function order(x) {
  return d("order", String(x));
}

function string_of_margin(param) {
  if (typeof param === "number") {
    if (param >= -789508312) {
      return "0";
    } else {
      return "auto";
    }
  } else {
    var variant = param[0];
    if (variant >= 22643) {
      if (variant >= 25096) {
        if (variant >= 26433) {
          if (variant >= 5691738) {
            return string_of_float(param[1]) + "rem";
          } else {
            return string_of_float(param[1]) + "vw";
          }
        } else if (variant >= 26418) {
          return string_of_float(param[1]) + "vh";
        } else {
          return String(param[1]) + "px";
        }
      } else if (variant !== 24416) {
        if (variant >= 25092) {
          return String(param[1]) + "pt";
        } else {
          return string_of_float(param[1]) + "ex";
        }
      } else {
        return string_of_float(param[1]) + "mm";
      }
    } else if (variant >= -119887163) {
      if (variant >= 22186) {
        if (variant >= 22632) {
          return string_of_float(param[1]) + "em";
        } else {
          return string_of_float(param[1]) + "cm";
        }
      } else if (variant >= 22181) {
        return string_of_float(param[1]) + "ch";
      } else {
        return string_of_float(param[1]) + "%";
      }
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        return string_of_float(param[1]) + "vmin";
      } else {
        var match = param[1];
        if (match[0] >= 5745024) {
          return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
        } else {
          return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
        }
      }
    } else {
      return string_of_float(param[1]) + "vmax";
    }
  }
}

function margin(x) {
  return d("margin", string_of_margin(x));
}

function margin2(v, h) {
  var vString = string_of_margin(v);
  var hString = string_of_margin(h);
  return d("margin", join(" ", /* :: */[
                  vString,
                  /* :: */[
                    hString,
                    /* [] */0
                  ]
                ]));
}

function margin3(top, h, bottom) {
  var topString = string_of_margin(top);
  var hString = string_of_margin(h);
  var bottomString = string_of_margin(bottom);
  return d("margin", join(" ", /* :: */[
                  topString,
                  /* :: */[
                    hString,
                    /* :: */[
                      bottomString,
                      /* [] */0
                    ]
                  ]
                ]));
}

function margin4(top, right, bottom, left) {
  var topString = string_of_margin(top);
  var leftString = string_of_margin(left);
  var rightString = string_of_margin(right);
  var bottomString = string_of_margin(bottom);
  return d("margin", join(" ", /* :: */[
                  topString,
                  /* :: */[
                    rightString,
                    /* :: */[
                      bottomString,
                      /* :: */[
                        leftString,
                        /* [] */0
                      ]
                    ]
                  ]
                ]));
}

function marginLeft(x) {
  return d("marginLeft", string_of_margin(x));
}

function marginRight(x) {
  return d("marginRight", string_of_margin(x));
}

function marginTop(x) {
  return d("marginTop", string_of_margin(x));
}

function marginBottom(x) {
  return d("marginBottom", string_of_margin(x));
}

function padding(x) {
  return d("padding", string_of_length(x));
}

function padding2(v, h) {
  return d("padding", join(" ", List.map(string_of_length, /* :: */[
                      v,
                      /* :: */[
                        h,
                        /* [] */0
                      ]
                    ])));
}

function padding3(top, h, bottom) {
  return d("padding", join(" ", List.map(string_of_length, /* :: */[
                      top,
                      /* :: */[
                        h,
                        /* :: */[
                          bottom,
                          /* [] */0
                        ]
                      ]
                    ])));
}

function padding4(top, right, bottom, left) {
  return d("padding", join(" ", List.map(string_of_length, /* :: */[
                      top,
                      /* :: */[
                        right,
                        /* :: */[
                          bottom,
                          /* :: */[
                            left,
                            /* [] */0
                          ]
                        ]
                      ]
                    ])));
}

function paddingLeft(x) {
  return d("paddingLeft", string_of_length(x));
}

function paddingRight(x) {
  return d("paddingRight", string_of_length(x));
}

function paddingTop(x) {
  return d("paddingTop", string_of_length(x));
}

function paddingBottom(x) {
  return d("paddingBottom", string_of_length(x));
}

function string_of_dimension(param) {
  if (typeof param === "number") {
    if (param >= -550577721) {
      if (param >= 60557045) {
        return "max-content";
      } else {
        return "min-content";
      }
    } else if (param >= -789508312) {
      return "0";
    } else {
      return "auto";
    }
  } else {
    var variant = param[0];
    if (variant >= 22643) {
      if (variant >= 25096) {
        if (variant >= 26433) {
          if (variant >= 5691738) {
            return string_of_float(param[1]) + "rem";
          } else {
            return string_of_float(param[1]) + "vw";
          }
        } else if (variant >= 26418) {
          return string_of_float(param[1]) + "vh";
        } else {
          return String(param[1]) + "px";
        }
      } else if (variant >= 24416) {
        if (variant >= 25092) {
          return String(param[1]) + "pt";
        } else {
          return string_of_float(param[1]) + "mm";
        }
      } else if (variant >= 22860) {
        return string_of_float(param[1]) + "fr";
      } else {
        return string_of_float(param[1]) + "ex";
      }
    } else if (variant >= -119887163) {
      if (variant >= 22186) {
        if (variant >= 22632) {
          return string_of_float(param[1]) + "em";
        } else {
          return string_of_float(param[1]) + "cm";
        }
      } else if (variant >= 22181) {
        return string_of_float(param[1]) + "ch";
      } else {
        return string_of_float(param[1]) + "%";
      }
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        return string_of_float(param[1]) + "vmin";
      } else {
        var match = param[1];
        if (match[0] >= 5745024) {
          return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
        } else {
          return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
        }
      }
    } else {
      return string_of_float(param[1]) + "vmax";
    }
  }
}

function width(x) {
  return d("width", string_of_dimension(x));
}

function maxWidth(x) {
  return d("maxWidth", string_of_dimension(x));
}

function minWidth(x) {
  return d("minWidth", string_of_dimension(x));
}

function height(x) {
  return d("height", string_of_dimension(x));
}

function minHeight(x) {
  return d("minHeight", string_of_dimension(x));
}

function maxHeight(x) {
  return d("maxHeight", string_of_dimension(x));
}

function string_of_dimensions(dimensions) {
  return $$String.concat(" ", List.map(string_of_dimension, dimensions));
}

function gridTemplateColumns(dimensions) {
  return d("gridTemplateColumns", string_of_dimensions(dimensions));
}

function gridTemplateRows(dimensions) {
  return d("gridTemplateRows", string_of_dimensions(dimensions));
}

function gridAutoRows(dimensions) {
  return d("gridAutoRows", string_of_dimension(dimensions));
}

function gridColumn(start, end$prime) {
  return d("gridColumn", String(start) + (" / " + String(end$prime)));
}

function gridRow(start, end$prime) {
  return d("gridRow", String(start) + (" / " + String(end$prime)));
}

function gridColumnStart(n) {
  return d("gridColumnStart", String(n));
}

function gridColumnEnd(n) {
  return d("gridColumnEnd", String(n));
}

function gridRowStart(n) {
  return d("gridRowStart", String(n));
}

function gridRowEnd(n) {
  return d("gridRowEnd", String(n));
}

function gridColumnGap(n) {
  return d("gridColumnGap", string_of_length(n));
}

function gridRowGap(n) {
  return d("gridRowGap", string_of_length(n));
}

function gridGap(n) {
  return d("gridGap", string_of_length(n));
}

function string_of_align(param) {
  if (param >= 98248149) {
    if (param >= 662439529) {
      if (param >= 924268066) {
        return "flex-end";
      } else {
        return "flex-start";
      }
    } else if (param >= 287825029) {
      return "baseline";
    } else {
      return "center";
    }
  } else if (param >= -162316795) {
    return "stretch";
  } else {
    return "auto";
  }
}

function alignItems(x) {
  return d("alignItems", string_of_align(x));
}

function alignSelf(x) {
  return d("alignSelf", string_of_align(x));
}

function string_of_justify(param) {
  if (param >= 98248149) {
    if (param >= 662439529) {
      if (param >= 924268066) {
        return "flex-end";
      } else {
        return "flex-start";
      }
    } else if (param >= 516682146) {
      return "space-between";
    } else {
      return "center";
    }
  } else if (param >= -162316795) {
    return "stretch";
  } else {
    return "space-around";
  }
}

function justifyContent(x) {
  return d("justifyContent", string_of_justify(x));
}

function alignContent(x) {
  return d("alignContent", string_of_justify(x));
}

function boxSizing(x) {
  return d("boxSizing", x >= 9307263 ? "border-box" : "content-box");
}

function $$float(x) {
  return d("float", x !== -922086728 ? (
                x >= -379319332 ? "right" : "left"
              ) : "none");
}

function clear(x) {
  return d("clear", x !== -944764921 ? (
                x >= -379319332 ? "right" : "both"
              ) : "left");
}

function string_of_overflow(param) {
  if (param >= -862584982) {
    if (param >= 589592690) {
      return "visible";
    } else {
      return "hidden";
    }
  } else if (param >= -949692403) {
    return "scroll";
  } else {
    return "auto";
  }
}

function overflow(x) {
  return d("overflow", string_of_overflow(x));
}

function overflowX(x) {
  return d("overflowX", string_of_overflow(x));
}

function overflowY(x) {
  return d("overflowY", string_of_overflow(x));
}

function zIndex(i) {
  return d("zIndex", String(i));
}

function backfaceVisibility(x) {
  return d("backfaceVisibility", x >= 589592690 ? "visible" : "hidden");
}

function visibility(x) {
  return d("visibility", x >= 589592690 ? "visible" : "hidden");
}

function boxShadow($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, color) {
  var x = $staropt$star !== undefined ? $staropt$star : /* zero */-789508312;
  var y = $staropt$star$1 !== undefined ? $staropt$star$1 : /* zero */-789508312;
  var blur = $staropt$star$2 !== undefined ? $staropt$star$2 : /* zero */-789508312;
  var spread = $staropt$star$3 !== undefined ? $staropt$star$3 : /* zero */-789508312;
  var inset = $staropt$star$4 !== undefined ? $staropt$star$4 : false;
  return /* `shadow */[
          488687584,
          join(" ", /* :: */[
                string_of_length(x),
                /* :: */[
                  string_of_length(y),
                  /* :: */[
                    string_of_length(blur),
                    /* :: */[
                      string_of_length(spread),
                      /* :: */[
                        string_of_color(color),
                        /* :: */[
                          inset ? "inset" : "",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ])
        ];
}

function string_of_shadow(param) {
  return param[1];
}

function boxShadows(shadows) {
  return d("boxShadow", join(", ", List.map(string_of_shadow, shadows)));
}

function string_of_borderstyle(param) {
  if (param >= 568403505) {
    if (param >= 841979626) {
      return "dotted";
    } else {
      return "dashed";
    }
  } else if (param >= 12956715) {
    return "solid";
  } else {
    return "none";
  }
}

function border(px, style, color) {
  return d("border", join(" ", /* :: */[
                  string_of_length(px),
                  /* :: */[
                    string_of_borderstyle(style),
                    /* :: */[
                      string_of_color(color),
                      /* [] */0
                    ]
                  ]
                ]));
}

function borderWidth(x) {
  return d("borderWidth", string_of_length(x));
}

function borderStyle(x) {
  return d("borderStyle", string_of_borderstyle(x));
}

function borderColor(x) {
  return d("borderColor", string_of_color(x));
}

function borderLeft(px, style, color) {
  return d("borderLeft", join(" ", /* :: */[
                  string_of_length(px),
                  /* :: */[
                    string_of_borderstyle(style),
                    /* :: */[
                      string_of_color(color),
                      /* [] */0
                    ]
                  ]
                ]));
}

function borderLeftWidth(x) {
  return d("borderLeftWidth", string_of_length(x));
}

function borderLeftStyle(x) {
  return d("borderLeftStyle", string_of_borderstyle(x));
}

function borderLeftColor(x) {
  return d("borderLeftColor", string_of_color(x));
}

function borderRight(px, style, color) {
  return d("borderRight", join(" ", /* :: */[
                  string_of_length(px),
                  /* :: */[
                    string_of_borderstyle(style),
                    /* :: */[
                      string_of_color(color),
                      /* [] */0
                    ]
                  ]
                ]));
}

function borderRightWidth(x) {
  return d("borderRightWidth", string_of_length(x));
}

function borderRightColor(x) {
  return d("borderRightColor", string_of_color(x));
}

function borderRightStyle(x) {
  return d("borderRightStyle", string_of_borderstyle(x));
}

function borderTop(px, style, color) {
  return d("borderTop", join(" ", /* :: */[
                  string_of_length(px),
                  /* :: */[
                    string_of_borderstyle(style),
                    /* :: */[
                      string_of_color(color),
                      /* [] */0
                    ]
                  ]
                ]));
}

function borderTopWidth(x) {
  return d("borderTopWidth", string_of_length(x));
}

function borderTopStyle(x) {
  return d("borderTopStyle", string_of_borderstyle(x));
}

function borderTopColor(x) {
  return d("borderTopColor", string_of_color(x));
}

function borderBottom(px, style, color) {
  return d("borderBottom", join(" ", /* :: */[
                  string_of_length(px),
                  /* :: */[
                    string_of_borderstyle(style),
                    /* :: */[
                      string_of_color(color),
                      /* [] */0
                    ]
                  ]
                ]));
}

function borderBottomWidth(x) {
  return d("borderBottomWidth", string_of_length(x));
}

function borderBottomStyle(x) {
  return d("borderBottomStyle", string_of_borderstyle(x));
}

function borderBottomColor(x) {
  return d("borderBottomColor", string_of_color(x));
}

function borderRadius(i) {
  return d("borderRadius", string_of_length(i));
}

function borderTopLeftRadius(i) {
  return d("borderTopLeftRadius", string_of_length(i));
}

function borderTopRightRadius(i) {
  return d("borderTopRightRadius", string_of_length(i));
}

function borderBottomLeftRadius(i) {
  return d("borderBottomLeftRadius", string_of_length(i));
}

function borderBottomRightRadius(i) {
  return d("borderBottomRightRadius", string_of_length(i));
}

function tableLayout(x) {
  return d("tableLayout", x >= 10615156 ? "fixed" : "auto");
}

function borderCollapse(x) {
  return d("borderCollapse", x >= 119283555 ? "separate" : "collapse");
}

function borderSpacing(i) {
  return d("borderSpacing", string_of_length(i));
}

function background(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x !== 292050538 ? (
        x >= 582626130 ? "transparent" : "none"
      ) : "currentColor";
  } else {
    var variant = x[0];
    if (variant >= 5197569) {
      if (variant !== 5692173) {
        if (variant >= 119548911) {
          if (variant >= 616379637) {
            var match = x[1];
            tmp = "linear-gradient(" + (string_of_angle(match[0]) + (", " + (string_of_stops(match[1]) + ")")));
          } else {
            tmp = "radial-gradient(" + (string_of_stops(x[1]) + ")");
          }
        } else if (variant >= 5843823) {
          tmp = "url(" + (x[1] + ")");
        } else {
          var match$1 = x[1];
          tmp = "hsl(" + (join(", ", /* :: */[
                  String(match$1[0]),
                  /* :: */[
                    String(match$1[1]) + "%",
                    /* :: */[
                      String(match$1[2]) + "%",
                      /* [] */0
                    ]
                  ]
                ]) + ")");
        }
      } else {
        var match$2 = x[1];
        tmp = "rgb(" + (join(", ", /* :: */[
                String(match$2[0]),
                /* :: */[
                  String(match$2[1]),
                  /* :: */[
                    String(match$2[2]),
                    /* [] */0
                  ]
                ]
              ]) + ")");
      }
    } else if (variant !== -878128972) {
      if (variant >= -160280644) {
        if (variant >= 5194459) {
          tmp = "#" + x[1];
        } else {
          var match$3 = x[1];
          tmp = "repeating-linear-gradient(" + (string_of_angle(match$3[0]) + (", " + (string_of_stops(match$3[1]) + ")")));
        }
      } else if (variant >= -657111370) {
        tmp = "repeating-radial-gradient(" + (string_of_stops(x[1]) + ")");
      } else {
        var match$4 = x[1];
        tmp = "hsla(" + (join(", ", /* :: */[
                String(match$4[0]),
                /* :: */[
                  String(match$4[1]) + "%",
                  /* :: */[
                    String(match$4[2]) + "%",
                    /* :: */[
                      string_of_float(match$4[3]),
                      /* [] */0
                    ]
                  ]
                ]
              ]) + ")");
      }
    } else {
      var match$5 = x[1];
      tmp = "rgba(" + (join(", ", /* :: */[
              String(match$5[0]),
              /* :: */[
                String(match$5[1]),
                /* :: */[
                  String(match$5[2]),
                  /* :: */[
                    string_of_float(match$5[3]),
                    /* [] */0
                  ]
                ]
              ]
            ]) + ")");
    }
  }
  return d("background", tmp);
}

function backgroundColor(x) {
  return d("backgroundColor", string_of_color(x));
}

function backgroundImage(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = "none";
  } else {
    var variant = x[0];
    if (variant !== -160280644) {
      if (variant >= 119548911) {
        if (variant >= 616379637) {
          var match = x[1];
          tmp = "linear-gradient(" + (string_of_angle(match[0]) + (", " + (string_of_stops(match[1]) + ")")));
        } else {
          tmp = "radial-gradient(" + (string_of_stops(x[1]) + ")");
        }
      } else {
        tmp = variant >= 5843823 ? "url(" + (x[1] + ")") : "repeating-radial-gradient(" + (string_of_stops(x[1]) + ")");
      }
    } else {
      var match$1 = x[1];
      tmp = "repeating-linear-gradient(" + (string_of_angle(match$1[0]) + (", " + (string_of_stops(match$1[1]) + ")")));
    }
  }
  return d("backgroundImage", tmp);
}

function backgroundAttachment(x) {
  return d("backgroundAttachment", x !== -118437525 ? (
                x >= 10615156 ? "fixed" : "scroll"
              ) : "local");
}

function backgroundClip(x) {
  return d("backgroundClip", x !== 9307263 ? (
                x >= 972575930 ? "padding-box" : "content-box"
              ) : "border-box");
}

function backgroundOrigin(x) {
  return d("backgroundOrigin", x !== 9307263 ? (
                x >= 972575930 ? "padding-box" : "content-box"
              ) : "border-box");
}

function backgroundPosition(x, y) {
  return d("backgroundPosition", string_of_length(x) + (" " + string_of_length(y)));
}

function backgroundRepeat(x) {
  return d("backgroundRepeat", x >= 646437021 ? (
                x >= 646437022 ? "repeat-y" : "repeat-x"
              ) : (
                x >= 108828507 ? "repeat" : "no-repeat"
              ));
}

function backgroundSize(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x !== -899416265 ? (
        x >= 427065300 ? "contain" : "auto"
      ) : "cover";
  } else {
    var match = x[1];
    tmp = string_of_length(match[0]) + (" " + string_of_length(match[1]));
  }
  return d("backgroundSize", tmp);
}

function cursor(x) {
  return d("cursor", x >= -459627717 ? (
                x >= 365450254 ? (
                    x !== 465819841 ? (
                        x >= 626862894 ? (
                            x >= 939907157 ? "not-allowed" : "context-menu"
                          ) : (
                            x >= 563171728 ? "alias" : "all-scroll"
                          )
                      ) : "default"
                  ) : (
                    x !== -88732200 ? (
                        x >= 103479213 ? (
                            x >= 180897442 ? "crosshair" : "progress"
                          ) : (
                            x >= -19620980 ? "grabbing" : "zoom-out"
                          )
                      ) : "zoom-in"
                  )
              ) : (
                x >= -933174511 ? (
                    x !== -922086728 ? (
                        x >= -822977931 ? (
                            x >= -786317123 ? "pointer" : "wait"
                          ) : (
                            x >= -856044371 ? "text" : "move"
                          )
                      ) : "none"
                  ) : (
                    x !== -1044569694 ? (
                        x >= -999567412 ? (
                            x >= -989121855 ? "help" : "grab"
                          ) : (
                            x >= -1044071499 ? "copy" : "auto"
                          )
                      ) : "cell"
                  )
              ));
}

function clipPath(x) {
  return d("clipPath", "url(" + (x[1] + ")"));
}

function string_of_listStyleType(param) {
  if (param >= -484197732) {
    if (param >= 700345660) {
      if (param >= 787279419) {
        if (param >= 826920258) {
          return "upper-latin";
        } else {
          return "upper-roman";
        }
      } else if (param >= 739986499) {
        return "lower-latin";
      } else {
        return "lower-roman";
      }
    } else if (param >= -422333295) {
      return "decimal";
    } else {
      return "upper-alpha";
    }
  } else if (param >= -703761904) {
    if (param >= -655228771) {
      if (param >= -571131491) {
        return "lower-alpha";
      } else {
        return "square";
      }
    } else if (param >= -699686657) {
      return "lower-greek";
    } else {
      return "circle";
    }
  } else if (param >= -922086728) {
    return "none";
  } else {
    return "disc";
  }
}

function string_of_listStylePosition(param) {
  if (param >= 501235708) {
    return "inside";
  } else {
    return "outside";
  }
}

function string_of_listStyleImage(param) {
  if (typeof param === "number") {
    return "none";
  } else {
    return func1("url", param[1]);
  }
}

function listStyle(style, pos, img) {
  return d("listStyle", join(" ", /* :: */[
                  string_of_listStyleType(style),
                  /* :: */[
                    string_of_listStylePosition(pos),
                    /* :: */[
                      string_of_listStyleImage(img),
                      /* [] */0
                    ]
                  ]
                ]));
}

function listStyleType(x) {
  return d("listStyleType", string_of_listStyleType(x));
}

function listStylePosition(x) {
  return d("listStylePosition", string_of_listStylePosition(x));
}

function listStyleImage(x) {
  return d("listStyleImage", string_of_listStyleImage(x));
}

function opacity(x) {
  return d("opacity", string_of_float(x));
}

function string_of_outlineStyle(param) {
  if (param >= 472095738) {
    if (param !== 568403505) {
      if (param >= 852175633) {
        if (param >= 1042283741) {
          return "inset";
        } else {
          return "double";
        }
      } else if (param >= 841979626) {
        return "dotted";
      } else {
        return "grove";
      }
    } else {
      return "dashed";
    }
  } else if (param !== -862584982) {
    if (param >= 12956715) {
      if (param >= 209930196) {
        return "outset";
      } else {
        return "solid";
      }
    } else if (param >= -379468757) {
      return "ridge";
    } else {
      return "none";
    }
  } else {
    return "hidden";
  }
}

function outline(size, style, color) {
  return d("outline", join(" ", /* :: */[
                  string_of_length(size),
                  /* :: */[
                    string_of_outlineStyle(style),
                    /* :: */[
                      string_of_color(color),
                      /* [] */0
                    ]
                  ]
                ]));
}

function outlineStyle(x) {
  return d("outlineStyle", string_of_outlineStyle(x));
}

function outlineWidth(x) {
  return d("outlineWidth", string_of_length(x));
}

function outlineColor(x) {
  return d("outlineColor", string_of_color(x));
}

function outlineOffset(x) {
  return d("outlineOffset", string_of_length(x));
}

var jsMapperConstantArray = /* array */[
  /* tuple */[
    107228912,
    "italic"
  ],
  /* tuple */[
    734792881,
    "oblique"
  ],
  /* tuple */[
    812216871,
    "normal"
  ]
];

function color(x) {
  return d("color", string_of_color(x));
}

function fontFamily(x) {
  return d("fontFamily", x);
}

function fontSize(x) {
  return d("fontSize", string_of_length(x));
}

function fontVariant(x) {
  return d("fontVariant", x >= 812216871 ? "normal" : "small-caps");
}

function fontStyle(x) {
  return d("fontStyle", Js_mapperRt.binarySearch(3, x, jsMapperConstantArray));
}

function fontFace(fontFamily, src, fontStyle, fontWeight, _) {
  var fontStyle$1 = Js_option.map((function (value) {
          return Js_mapperRt.binarySearch(3, value, jsMapperConstantArray);
        }), fontStyle);
  var src$1 = $$String.concat(", ", List.map((function (param) {
              if (param[0] >= 5843823) {
                return "url(\"" + (String(param[1]) + "\")");
              } else {
                return "local(\"" + (String(param[1]) + "\")");
              }
            }), src));
  var ds_000 = d("font-family", fontFamily);
  var ds_001 = /* :: */[
    d("src", src$1),
    /* [] */0
  ];
  var ds = /* :: */[
    ds_000,
    ds_001
  ];
  var ds$1 = Belt_Option.mapWithDefault(fontStyle$1, ds, (function (fs) {
          return /* :: */[
                  d("font-style", fs),
                  ds
                ];
        }));
  return makeDict(Belt_Option.mapWithDefault(fontWeight, ds$1, (function (fw) {
                    return /* :: */[
                            d("font-weight", String(fw)),
                            ds$1
                          ];
                  })));
}

function fontWeight(x) {
  return d("fontWeight", String(x));
}

function lineHeight(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x !== -789508312 ? (
        x >= 812216871 ? "normal" : "auto"
      ) : "0";
  } else {
    var variant = x[0];
    if (variant >= 22643) {
      tmp = variant >= 26418 ? (
          variant >= 4845682 ? (
              variant >= 5691738 ? string_of_float(x[1]) + "rem" : string_of_float(x[1])
            ) : (
              variant >= 26433 ? string_of_float(x[1]) + "vw" : string_of_float(x[1]) + "vh"
            )
        ) : (
          variant >= 25092 ? (
              variant >= 25096 ? String(x[1]) + "px" : String(x[1]) + "pt"
            ) : (
              variant >= 24416 ? string_of_float(x[1]) + "mm" : string_of_float(x[1]) + "ex"
            )
        );
    } else if (variant >= -119887163) {
      tmp = variant >= 22186 ? (
          variant >= 22632 ? string_of_float(x[1]) + "em" : string_of_float(x[1]) + "cm"
        ) : (
          variant >= 22181 ? string_of_float(x[1]) + "ch" : string_of_float(x[1]) + "%"
        );
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        tmp = string_of_float(x[1]) + "vmin";
      } else {
        var match = x[1];
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = string_of_float(x[1]) + "vmax";
    }
  }
  return d("lineHeight", tmp);
}

function letterSpacing(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x !== -789508312 ? (
        x >= 812216871 ? "normal" : "auto"
      ) : "0";
  } else {
    var variant = x[0];
    if (variant >= 22643) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? string_of_float(x[1]) + "rem" : string_of_float(x[1]) + "vw"
            ) : (
              variant >= 26418 ? string_of_float(x[1]) + "vh" : String(x[1]) + "px"
            )
        ) : (
          variant !== 24416 ? (
              variant >= 25092 ? String(x[1]) + "pt" : string_of_float(x[1]) + "ex"
            ) : string_of_float(x[1]) + "mm"
        );
    } else if (variant >= -119887163) {
      tmp = variant >= 22186 ? (
          variant >= 22632 ? string_of_float(x[1]) + "em" : string_of_float(x[1]) + "cm"
        ) : (
          variant >= 22181 ? string_of_float(x[1]) + "ch" : string_of_float(x[1]) + "%"
        );
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        tmp = string_of_float(x[1]) + "vmin";
      } else {
        var match = x[1];
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = string_of_float(x[1]) + "vmax";
    }
  }
  return d("letterSpacing", tmp);
}

function textAlign(x) {
  return d("textAlign", x >= 62250832 ? (
                x >= 98248149 ? "center" : "justify"
              ) : (
                x >= -379319332 ? "right" : "left"
              ));
}

function textDecoration(x) {
  return d("textDecoration", x >= 131142924 ? (
                x >= 412155569 ? "line-through" : "underline"
              ) : (
                x >= -922086728 ? "none" : "overline"
              ));
}

function textDecorationColor(x) {
  return d("textDecorationColor", string_of_color(x));
}

function textDecorationStyle(x) {
  return d("textDecorationStyle", x !== 12956715 ? (
                x >= 841979626 ? (
                    x >= 852175633 ? "double" : "dotted"
                  ) : (
                    x >= 568403505 ? "dashed" : "wavy"
                  )
              ) : "solid");
}

function textIndent(x) {
  return d("textIndent", string_of_length(x));
}

function textOverflow(x) {
  return d("textOverflow", typeof x === "number" ? (
                x >= 166888785 ? "ellipsis" : "clip"
              ) : x[1]);
}

function textShadow($staropt$star, $staropt$star$1, $staropt$star$2, color) {
  var x = $staropt$star !== undefined ? $staropt$star : /* zero */-789508312;
  var y = $staropt$star$1 !== undefined ? $staropt$star$1 : /* zero */-789508312;
  var blur = $staropt$star$2 !== undefined ? $staropt$star$2 : /* zero */-789508312;
  return d("textShadow", join(" ", /* :: */[
                  string_of_length(x),
                  /* :: */[
                    string_of_length(y),
                    /* :: */[
                      string_of_length(blur),
                      /* :: */[
                        string_of_color(color),
                        /* [] */0
                      ]
                    ]
                  ]
                ]));
}

function textTransform(x) {
  return d("textTransform", x >= -425349839 ? (
                x >= -415330030 ? "uppercase" : "lowercase"
              ) : (
                x >= -509867604 ? "capitalize" : "none"
              ));
}

function userSelect(x) {
  return d("userSelect", x >= -856044371 ? (
                x >= 4847905 ? "all" : "text"
              ) : (
                x >= -922086728 ? "none" : "auto"
              ));
}

function verticalAlign(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= 5793429 ? (
        x !== 79692155 ? (
            x >= 476669816 ? (
                x >= 516406248 ? "text-top" : "text-bottom"
              ) : (
                x >= 287825029 ? "baseline" : "top"
              )
          ) : "super"
      ) : (
        x !== -866200747 ? (
            x >= -445061397 ? (
                x >= 5745024 ? "sub" : "bottom"
              ) : (
                x >= -789508312 ? "0" : "auto"
              )
          ) : "middle"
      );
  } else {
    var variant = x[0];
    if (variant >= 22643) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? string_of_float(x[1]) + "rem" : string_of_float(x[1]) + "vw"
            ) : (
              variant >= 26418 ? string_of_float(x[1]) + "vh" : String(x[1]) + "px"
            )
        ) : (
          variant !== 24416 ? (
              variant >= 25092 ? String(x[1]) + "pt" : string_of_float(x[1]) + "ex"
            ) : string_of_float(x[1]) + "mm"
        );
    } else if (variant >= -119887163) {
      tmp = variant >= 22186 ? (
          variant >= 22632 ? string_of_float(x[1]) + "em" : string_of_float(x[1]) + "cm"
        ) : (
          variant >= 22181 ? string_of_float(x[1]) + "ch" : string_of_float(x[1]) + "%"
        );
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        tmp = string_of_float(x[1]) + "vmin";
      } else {
        var match = x[1];
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = string_of_float(x[1]) + "vmax";
    }
  }
  return d("verticalAlign", tmp);
}

function whiteSpace(x) {
  return d("whiteSpace", x !== 538440119 ? (
                x >= 812216871 ? (
                    x >= 867913355 ? "nowrap" : "normal"
                  ) : (
                    x >= 660870029 ? "pre-wrap" : "pre"
                  )
              ) : "pre-line");
}

function wordBreak(x) {
  return d("wordBreak", x !== 812216871 ? (
                x >= 892748188 ? "keep-all" : "break-all"
              ) : "normal");
}

function wordSpacing(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x !== -789508312 ? (
        x >= 812216871 ? "normal" : "auto"
      ) : "0";
  } else {
    var variant = x[0];
    if (variant >= 22643) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? string_of_float(x[1]) + "rem" : string_of_float(x[1]) + "vw"
            ) : (
              variant >= 26418 ? string_of_float(x[1]) + "vh" : String(x[1]) + "px"
            )
        ) : (
          variant !== 24416 ? (
              variant >= 25092 ? String(x[1]) + "pt" : string_of_float(x[1]) + "ex"
            ) : string_of_float(x[1]) + "mm"
        );
    } else if (variant >= -119887163) {
      tmp = variant >= 22186 ? (
          variant >= 22632 ? string_of_float(x[1]) + "em" : string_of_float(x[1]) + "cm"
        ) : (
          variant >= 22181 ? string_of_float(x[1]) + "ch" : string_of_float(x[1]) + "%"
        );
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        tmp = string_of_float(x[1]) + "vmin";
      } else {
        var match = x[1];
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = string_of_float(x[1]) + "vmax";
    }
  }
  return d("wordSpacing", tmp);
}

function wordWrap(x) {
  return d("wordWrap", x >= 1059921449 ? "break-word" : "normal");
}

function string_of_pointerEvents(param) {
  if (param >= -922086728) {
    return "none";
  } else {
    return "auto";
  }
}

function pointerEvents(x) {
  return d("pointerEvents", string_of_pointerEvents(x));
}

function string_of_transform(param) {
  var variant = param[0];
  if (variant >= -120664438) {
    if (variant >= 106728778) {
      if (variant >= 178189215) {
        if (variant >= 1009117838) {
          switch (variant - 1009117838 | 0) {
            case 0 : 
                return func1("scaleX", string_of_float(param[1]));
            case 1 : 
                return func1("scaleY", string_of_float(param[1]));
            case 2 : 
                return func1("scaleZ", string_of_float(param[1]));
            
          }
        } else {
          var match = param[1];
          return funcAny("translate3d", List.map(string_of_length, /* :: */[
                          match[0],
                          /* :: */[
                            match[1],
                            /* :: */[
                              match[2],
                              /* [] */0
                            ]
                          ]
                        ]));
        }
      } else if (variant >= 142802924) {
        var match$1 = param[1];
        return funcAny("rotate3d", /* :: */[
                    string_of_float(match$1[0]),
                    /* :: */[
                      string_of_float(match$1[1]),
                      /* :: */[
                        string_of_float(match$1[2]),
                        /* :: */[
                          string_of_angle(match$1[3]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
      } else {
        switch (variant - 106728778 | 0) {
          case 0 : 
              return func1("translateX", string_of_length(param[1]));
          case 1 : 
              return func1("translateY", string_of_length(param[1]));
          case 2 : 
              return func1("translateZ", string_of_length(param[1]));
          
        }
      }
    } else if (variant !== -31746546) {
      if (variant >= -31746545) {
        return func1("skewY", string_of_angle(param[1]));
      } else {
        var match$2 = param[1];
        return funcAny("scale", List.map(string_of_float, /* :: */[
                        match$2[0],
                        /* :: */[
                          match$2[1],
                          /* [] */0
                        ]
                      ]));
      }
    } else {
      return func1("skewX", string_of_angle(param[1]));
    }
  } else if (variant >= -887077285) {
    if (variant >= -452513317) {
      if (variant >= -249738851) {
        switch (variant + 249738851 | 0) {
          case 0 : 
              return func1("rotateX", string_of_angle(param[1]));
          case 1 : 
              return func1("rotateY", string_of_angle(param[1]));
          case 2 : 
              return func1("rotateZ", string_of_angle(param[1]));
          
        }
      } else {
        var match$3 = param[1];
        return funcAny("scale3d", List.map(string_of_float, /* :: */[
                        match$3[0],
                        /* :: */[
                          match$3[1],
                          /* :: */[
                            match$3[2],
                            /* [] */0
                          ]
                        ]
                      ]));
      }
    } else if (variant >= -866839798) {
      var match$4 = param[1];
      return funcAny("skew", List.map(string_of_angle, /* :: */[
                      match$4[0],
                      /* :: */[
                        match$4[1],
                        /* [] */0
                      ]
                    ]));
    } else {
      return func1("rotate", string_of_angle(param[1]));
    }
  } else if (variant >= -914368690) {
    var match$5 = param[1];
    return func2("translate", string_of_length(match$5[0]), string_of_length(match$5[1]));
  } else {
    return func1("perspective", String(param[1]));
  }
}

function transform(x) {
  return d("transform", string_of_transform(x));
}

function transforms(xs) {
  return d("transform", join(" ", List.map(string_of_transform, xs)));
}

function transformOrigin(x, y) {
  return d("transformOrigin", join(" ", List.map(string_of_length, /* :: */[
                      x,
                      /* :: */[
                        y,
                        /* [] */0
                      ]
                    ])));
}

function transformOrigin3d(x, y, z) {
  return d("transformOrigin", join(" ", List.map(string_of_length, /* :: */[
                      x,
                      /* :: */[
                        y,
                        /* :: */[
                          z,
                          /* [] */0
                        ]
                      ]
                    ])));
}

function transformStyle(x) {
  return d("transformStyle", x >= 589702045 ? "preserve-3d" : "flat");
}

function perspective(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= -789508312 ? "0" : "none";
  } else {
    var variant = x[0];
    if (variant >= 22643) {
      tmp = variant >= 25096 ? (
          variant >= 26433 ? (
              variant >= 5691738 ? string_of_float(x[1]) + "rem" : string_of_float(x[1]) + "vw"
            ) : (
              variant >= 26418 ? string_of_float(x[1]) + "vh" : String(x[1]) + "px"
            )
        ) : (
          variant !== 24416 ? (
              variant >= 25092 ? String(x[1]) + "pt" : string_of_float(x[1]) + "ex"
            ) : string_of_float(x[1]) + "mm"
        );
    } else if (variant >= -119887163) {
      tmp = variant >= 22186 ? (
          variant >= 22632 ? string_of_float(x[1]) + "em" : string_of_float(x[1]) + "cm"
        ) : (
          variant >= 22181 ? string_of_float(x[1]) + "ch" : string_of_float(x[1]) + "%"
        );
    } else if (variant !== -833472530) {
      if (variant >= -833470756) {
        tmp = string_of_float(x[1]) + "vmin";
      } else {
        var match = x[1];
        tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
      }
    } else {
      tmp = string_of_float(x[1]) + "vmax";
    }
  }
  return d("perspective", tmp);
}

function string_of_timingFunction(param) {
  if (typeof param === "number") {
    if (param >= -193525386) {
      if (param >= 138027891) {
        return "ease-out";
      } else if (param >= 20933615) {
        return "step-end";
      } else {
        return "step-start";
      }
    } else if (param !== -960651557) {
      if (param >= -325037595) {
        return "linear";
      } else {
        return "ease";
      }
    } else {
      return "ease-in-out";
    }
  } else if (param[0] >= 68058023) {
    var match = param[1];
    var i = match[0];
    if (match[1] >= 67859554) {
      return func2("steps", String(i), "start");
    } else {
      return func2("steps", String(i), "end");
    }
  } else {
    var match$1 = param[1];
    return funcAny("cubic-bezier", List.map(string_of_float, /* :: */[
                    match$1[0],
                    /* :: */[
                      match$1[1],
                      /* :: */[
                        match$1[2],
                        /* :: */[
                          match$1[3],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]));
  }
}

function transition($staropt$star, $staropt$star$1, $staropt$star$2, property) {
  var duration = $staropt$star !== undefined ? $staropt$star : 0;
  var delay = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  var timingFunction = $staropt$star$2 !== undefined ? $staropt$star$2 : /* ease */-1022587922;
  return /* `transition */[
          -659583595,
          join(" ", /* :: */[
                String(duration) + "ms",
                /* :: */[
                  string_of_timingFunction(timingFunction),
                  /* :: */[
                    String(delay) + "ms",
                    /* :: */[
                      property,
                      /* [] */0
                    ]
                  ]
                ]
              ])
        ];
}

function transitions(xs) {
  return d("transition", join(", ", List.map((function (param) {
                        return param[1];
                      }), xs)));
}

function transitionDelay(i) {
  return d("transitionDelay", String(i) + "ms");
}

function transitionDuration(i) {
  return d("transitionDuration", String(i) + "ms");
}

function transitionTimingFunction(x) {
  return d("transitionTimingFunction", string_of_timingFunction(x));
}

function transitionProperty(x) {
  return d("transitionProperty", x);
}

function perspectiveOrigin(x, y) {
  return d("perspectiveOrigin", join(" ", List.map(string_of_length, /* :: */[
                      x,
                      /* :: */[
                        y,
                        /* [] */0
                      ]
                    ])));
}

function string_of_animationDirection(param) {
  if (param >= 812216871) {
    if (param >= 892586298) {
      return "alternate";
    } else {
      return "normal";
    }
  } else if (param >= 545428232) {
    return "alternate-reverse";
  } else {
    return "reverse";
  }
}

function string_of_animationFillMode(param) {
  if (param >= 245861168) {
    if (param >= 733653774) {
      return "forwards";
    } else {
      return "backwards";
    }
  } else if (param >= -922086728) {
    return "none";
  } else {
    return "both";
  }
}

function string_of_animationIterationCount(param) {
  if (typeof param === "number") {
    return "infinite";
  } else {
    return String(param[1]);
  }
}

function string_of_animationPlayState(param) {
  if (param >= -276545362) {
    return "paused";
  } else {
    return "running";
  }
}

function animation($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, $staropt$star$6, animation$1) {
  var duration = $staropt$star !== undefined ? $staropt$star : 0;
  var delay = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  var direction = $staropt$star$2 !== undefined ? $staropt$star$2 : /* normal */812216871;
  var timingFunction = $staropt$star$3 !== undefined ? $staropt$star$3 : /* ease */-1022587922;
  var fillMode = $staropt$star$4 !== undefined ? $staropt$star$4 : /* none */-922086728;
  var playState = $staropt$star$5 !== undefined ? $staropt$star$5 : /* running */-345412097;
  var iterationCount = $staropt$star$6 !== undefined ? $staropt$star$6 : /* `count */[
      -899463985,
      1
    ];
  return /* `animation */[
          -885723388,
          join(" ", /* :: */[
                animation$1[1][0],
                /* :: */[
                  String(duration) + "ms",
                  /* :: */[
                    string_of_timingFunction(timingFunction),
                    /* :: */[
                      String(delay) + "ms",
                      /* :: */[
                        string_of_animationIterationCount(iterationCount),
                        /* :: */[
                          string_of_animationDirection(direction),
                          /* :: */[
                            string_of_animationFillMode(fillMode),
                            /* :: */[
                              string_of_animationPlayState(playState),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ])
        ];
}

function string_of_animation(param) {
  return param[1];
}

function animations(xs) {
  return d("animation", join(", ", List.map(string_of_animation, xs)));
}

function animationDelay(x) {
  return d("animationDelay", String(x) + "ms");
}

function animationDirection(x) {
  return d("animationDirection", string_of_animationDirection(x));
}

function animationDuration(x) {
  return d("animationDuration", String(x) + "ms");
}

function animationFillMode(x) {
  return d("animationFillMode", string_of_animationFillMode(x));
}

function animationIterationCount(x) {
  return d("animationIterationCount", string_of_animationIterationCount(x));
}

function animationName(x) {
  return x;
}

function animationPlayState(x) {
  return d("animationPlayState", string_of_animationPlayState(x));
}

function animationTimingFunction(x) {
  return d("animationTimingFunction", string_of_timingFunction(x));
}

function selector(selector$1, rules) {
  return /* `selector */[
          829240095,
          /* tuple */[
            selector$1,
            rules
          ]
        ];
}

function active(param) {
  return selector(":active", param);
}

function after(param) {
  return selector("::after", param);
}

function before(param) {
  return selector("::before", param);
}

function checked(param) {
  return selector(":checked", param);
}

function children(param) {
  return selector(" > *", param);
}

function directSibling(param) {
  return selector(" + ", param);
}

function disabled(param) {
  return selector(":disabled", param);
}

function firstChild(param) {
  return selector(":first-child", param);
}

function firstOfType(param) {
  return selector(":first-of-type", param);
}

function focus(param) {
  return selector(":focus", param);
}

function hover(param) {
  return selector(":hover", param);
}

function lastChild(param) {
  return selector(":last-child", param);
}

function lastOfType(param) {
  return selector(":last-of-type", param);
}

function link(param) {
  return selector(":link", param);
}

function readOnly(param) {
  return selector(":read-only", param);
}

function required(param) {
  return selector(":required", param);
}

function visited(param) {
  return selector(":visited", param);
}

function enabled(param) {
  return selector(":enabled", param);
}

function noContent(param) {
  return selector(":empty", param);
}

function $$default(param) {
  return selector(":default", param);
}

function anyLink(param) {
  return selector(":any-link", param);
}

function onlyChild(param) {
  return selector(":only-child", param);
}

function onlyOfType(param) {
  return selector(":only-of-type", param);
}

function optional(param) {
  return selector(":optional", param);
}

function invalid(param) {
  return selector(":invalid", param);
}

function outOfRange(param) {
  return selector(":out-of-range", param);
}

function siblings(param) {
  return selector(" ~ ", param);
}

function target(param) {
  return selector(":target", param);
}

function firstLine(param) {
  return selector("::first-line", param);
}

function firstLetter(param) {
  return selector("::first-letter", param);
}

function selection(param) {
  return selector("::selection", param);
}

function placeholder(param) {
  return selector("::placeholder", param);
}

function media(query, rules) {
  return /* `selector */[
          829240095,
          /* tuple */[
            "@media " + query,
            rules
          ]
        ];
}

function fill(color) {
  return d("fill", string_of_color(color));
}

function fillOpacity(opacity) {
  return d("fillOpacity", string_of_float(opacity));
}

function fillRule(x) {
  return d("fillRule", x >= 110563029 ? "evenodd" : "nonzero");
}

function stroke(color) {
  return d("stroke", string_of_color(color));
}

function strokeWidth(length) {
  return d("strokeWidth", string_of_length(length));
}

function strokeOpacity(opacity) {
  return d("strokeOpacity", string_of_float(opacity));
}

function strokeMiterlimit(x) {
  return d("strokeMiterlimit", string_of_float(x));
}

function strokeLinecap(x) {
  return d("strokeLinecap", x !== -655228771 ? (
                x >= -312084402 ? "round" : "butt"
              ) : "square");
}

function strokeLinejoin(x) {
  return d("strokeLinejoin", x !== 141361157 ? (
                x >= 811681914 ? "bevel" : "round"
              ) : "miter");
}

function stopColor(c) {
  return d("stopColor", string_of_color(c));
}

function stopOpacity(o) {
  return d("stopOpacity", string_of_float(o));
}

var empty = /* [] */0;

var merge = List.concat;

var transparent = /* transparent */582626130;

var currentColor = /* currentColor */292050538;

var aliceblue = /* `hex */[
  5194459,
  "F0F8FF"
];

var antiquewhite = /* `hex */[
  5194459,
  "FAEBD7"
];

var aqua = /* `hex */[
  5194459,
  "00FFFF"
];

var aquamarine = /* `hex */[
  5194459,
  "7FFFD4"
];

var azure = /* `hex */[
  5194459,
  "F0FFFF"
];

var beige = /* `hex */[
  5194459,
  "F5F5DC"
];

var bisque = /* `hex */[
  5194459,
  "FFE4C4"
];

var black = /* `hex */[
  5194459,
  "000000"
];

var blanchedalmond = /* `hex */[
  5194459,
  "FFEBCD"
];

var blue = /* `hex */[
  5194459,
  "0000FF"
];

var blueviolet = /* `hex */[
  5194459,
  "8A2BE2"
];

var brown = /* `hex */[
  5194459,
  "A52A2A"
];

var burlywood = /* `hex */[
  5194459,
  "DEB887"
];

var cadetblue = /* `hex */[
  5194459,
  "5F9EA0"
];

var chartreuse = /* `hex */[
  5194459,
  "7FFF00"
];

var chocolate = /* `hex */[
  5194459,
  "D2691E"
];

var coral = /* `hex */[
  5194459,
  "FF7F50"
];

var cornflowerblue = /* `hex */[
  5194459,
  "6495ED"
];

var cornsilk = /* `hex */[
  5194459,
  "FFF8DC"
];

var crimson = /* `hex */[
  5194459,
  "DC143C"
];

var cyan = /* `hex */[
  5194459,
  "00FFFF"
];

var darkblue = /* `hex */[
  5194459,
  "00008B"
];

var darkcyan = /* `hex */[
  5194459,
  "008B8B"
];

var darkgoldenrod = /* `hex */[
  5194459,
  "B8860B"
];

var darkgray = /* `hex */[
  5194459,
  "A9A9A9"
];

var darkgrey = /* `hex */[
  5194459,
  "A9A9A9"
];

var darkgreen = /* `hex */[
  5194459,
  "006400"
];

var darkkhaki = /* `hex */[
  5194459,
  "BDB76B"
];

var darkmagenta = /* `hex */[
  5194459,
  "8B008B"
];

var darkolivegreen = /* `hex */[
  5194459,
  "556B2F"
];

var darkorange = /* `hex */[
  5194459,
  "FF8C00"
];

var darkorchid = /* `hex */[
  5194459,
  "9932CC"
];

var darkred = /* `hex */[
  5194459,
  "8B0000"
];

var darksalmon = /* `hex */[
  5194459,
  "E9967A"
];

var darkseagreen = /* `hex */[
  5194459,
  "8FBC8F"
];

var darkslateblue = /* `hex */[
  5194459,
  "483D8B"
];

var darkslategray = /* `hex */[
  5194459,
  "2F4F4F"
];

var darkslategrey = /* `hex */[
  5194459,
  "2F4F4F"
];

var darkturquoise = /* `hex */[
  5194459,
  "00CED1"
];

var darkviolet = /* `hex */[
  5194459,
  "9400D3"
];

var deeppink = /* `hex */[
  5194459,
  "FF1493"
];

var deepskyblue = /* `hex */[
  5194459,
  "00BFFF"
];

var dimgray = /* `hex */[
  5194459,
  "696969"
];

var dimgrey = /* `hex */[
  5194459,
  "696969"
];

var dodgerblue = /* `hex */[
  5194459,
  "1E90FF"
];

var firebrick = /* `hex */[
  5194459,
  "B22222"
];

var floralwhite = /* `hex */[
  5194459,
  "FFFAF0"
];

var forestgreen = /* `hex */[
  5194459,
  "228B22"
];

var fuchsia = /* `hex */[
  5194459,
  "FF00FF"
];

var gainsboro = /* `hex */[
  5194459,
  "DCDCDC"
];

var ghostwhite = /* `hex */[
  5194459,
  "F8F8FF"
];

var gold = /* `hex */[
  5194459,
  "FFD700"
];

var goldenrod = /* `hex */[
  5194459,
  "DAA520"
];

var gray = /* `hex */[
  5194459,
  "808080"
];

var grey = /* `hex */[
  5194459,
  "808080"
];

var green = /* `hex */[
  5194459,
  "008000"
];

var greenyellow = /* `hex */[
  5194459,
  "ADFF2F"
];

var honeydew = /* `hex */[
  5194459,
  "F0FFF0"
];

var hotpink = /* `hex */[
  5194459,
  "FF69B4"
];

var indianred = /* `hex */[
  5194459,
  "CD5C5C"
];

var indigo = /* `hex */[
  5194459,
  "4B0082"
];

var ivory = /* `hex */[
  5194459,
  "FFFFF0"
];

var khaki = /* `hex */[
  5194459,
  "F0E68C"
];

var lavender = /* `hex */[
  5194459,
  "E6E6FA"
];

var lavenderblush = /* `hex */[
  5194459,
  "FFF0F5"
];

var lawngreen = /* `hex */[
  5194459,
  "7CFC00"
];

var lemonchiffon = /* `hex */[
  5194459,
  "FFFACD"
];

var lightblue = /* `hex */[
  5194459,
  "ADD8E6"
];

var lightcoral = /* `hex */[
  5194459,
  "F08080"
];

var lightcyan = /* `hex */[
  5194459,
  "E0FFFF"
];

var lightgoldenrodyellow = /* `hex */[
  5194459,
  "FAFAD2"
];

var lightgray = /* `hex */[
  5194459,
  "D3D3D3"
];

var lightgrey = /* `hex */[
  5194459,
  "D3D3D3"
];

var lightgreen = /* `hex */[
  5194459,
  "90EE90"
];

var lightpink = /* `hex */[
  5194459,
  "FFB6C1"
];

var lightsalmon = /* `hex */[
  5194459,
  "FFA07A"
];

var lightseagreen = /* `hex */[
  5194459,
  "20B2AA"
];

var lightskyblue = /* `hex */[
  5194459,
  "87CEFA"
];

var lightslategray = /* `hex */[
  5194459,
  "778899"
];

var lightslategrey = /* `hex */[
  5194459,
  "778899"
];

var lightsteelblue = /* `hex */[
  5194459,
  "B0C4DE"
];

var lightyellow = /* `hex */[
  5194459,
  "FFFFE0"
];

var lime = /* `hex */[
  5194459,
  "00FF00"
];

var limegreen = /* `hex */[
  5194459,
  "32CD32"
];

var linen = /* `hex */[
  5194459,
  "FAF0E6"
];

var magenta = /* `hex */[
  5194459,
  "FF00FF"
];

var maroon = /* `hex */[
  5194459,
  "800000"
];

var mediumaquamarine = /* `hex */[
  5194459,
  "66CDAA"
];

var mediumblue = /* `hex */[
  5194459,
  "0000CD"
];

var mediumorchid = /* `hex */[
  5194459,
  "BA55D3"
];

var mediumpurple = /* `hex */[
  5194459,
  "9370DB"
];

var mediumseagreen = /* `hex */[
  5194459,
  "3CB371"
];

var mediumslateblue = /* `hex */[
  5194459,
  "7B68EE"
];

var mediumspringgreen = /* `hex */[
  5194459,
  "00FA9A"
];

var mediumturquoise = /* `hex */[
  5194459,
  "48D1CC"
];

var mediumvioletred = /* `hex */[
  5194459,
  "C71585"
];

var midnightblue = /* `hex */[
  5194459,
  "191970"
];

var mintcream = /* `hex */[
  5194459,
  "F5FFFA"
];

var mistyrose = /* `hex */[
  5194459,
  "FFE4E1"
];

var moccasin = /* `hex */[
  5194459,
  "FFE4B5"
];

var navajowhite = /* `hex */[
  5194459,
  "FFDEAD"
];

var navy = /* `hex */[
  5194459,
  "000080"
];

var oldlace = /* `hex */[
  5194459,
  "FDF5E6"
];

var olive = /* `hex */[
  5194459,
  "808000"
];

var olivedrab = /* `hex */[
  5194459,
  "6B8E23"
];

var orange = /* `hex */[
  5194459,
  "FFA500"
];

var orangered = /* `hex */[
  5194459,
  "FF4500"
];

var orchid = /* `hex */[
  5194459,
  "DA70D6"
];

var palegoldenrod = /* `hex */[
  5194459,
  "EEE8AA"
];

var palegreen = /* `hex */[
  5194459,
  "98FB98"
];

var paleturquoise = /* `hex */[
  5194459,
  "AFEEEE"
];

var palevioletred = /* `hex */[
  5194459,
  "DB7093"
];

var papayawhip = /* `hex */[
  5194459,
  "FFEFD5"
];

var peachpuff = /* `hex */[
  5194459,
  "FFDAB9"
];

var peru = /* `hex */[
  5194459,
  "CD853F"
];

var pink = /* `hex */[
  5194459,
  "FFC0CB"
];

var plum = /* `hex */[
  5194459,
  "DDA0DD"
];

var powderblue = /* `hex */[
  5194459,
  "B0E0E6"
];

var purple = /* `hex */[
  5194459,
  "800080"
];

var rebeccapurple = /* `hex */[
  5194459,
  "663399"
];

var red = /* `hex */[
  5194459,
  "FF0000"
];

var rosybrown = /* `hex */[
  5194459,
  "BC8F8F"
];

var royalblue = /* `hex */[
  5194459,
  "4169E1"
];

var saddlebrown = /* `hex */[
  5194459,
  "8B4513"
];

var salmon = /* `hex */[
  5194459,
  "FA8072"
];

var sandybrown = /* `hex */[
  5194459,
  "F4A460"
];

var seagreen = /* `hex */[
  5194459,
  "2E8B57"
];

var seashell = /* `hex */[
  5194459,
  "FFF5EE"
];

var sienna = /* `hex */[
  5194459,
  "A0522D"
];

var silver = /* `hex */[
  5194459,
  "C0C0C0"
];

var skyblue = /* `hex */[
  5194459,
  "87CEEB"
];

var slateblue = /* `hex */[
  5194459,
  "6A5ACD"
];

var slategray = /* `hex */[
  5194459,
  "708090"
];

var slategrey = /* `hex */[
  5194459,
  "708090"
];

var snow = /* `hex */[
  5194459,
  "FFFAFA"
];

var springgreen = /* `hex */[
  5194459,
  "00FF7F"
];

var steelblue = /* `hex */[
  5194459,
  "4682B4"
];

var tan = /* `hex */[
  5194459,
  "D2B48C"
];

var teal = /* `hex */[
  5194459,
  "008080"
];

var thistle = /* `hex */[
  5194459,
  "D8BFD8"
];

var tomato = /* `hex */[
  5194459,
  "FF6347"
];

var turquoise = /* `hex */[
  5194459,
  "40E0D0"
];

var violet = /* `hex */[
  5194459,
  "EE82EE"
];

var wheat = /* `hex */[
  5194459,
  "F5DEB3"
];

var white = /* `hex */[
  5194459,
  "FFFFFF"
];

var whitesmoke = /* `hex */[
  5194459,
  "F5F5F5"
];

var yellow = /* `hex */[
  5194459,
  "FFFF00"
];

var yellowgreen = /* `hex */[
  5194459,
  "9ACD3"
];

var zero = /* zero */-789508312;

var solid = /* solid */12956715;

var dotted = /* dotted */841979626;

var dashed = /* dashed */568403505;

var none = /* none */-922086728;

var auto = /* auto */-1065951377;

var hidden = /* hidden */-862584982;

var visible = /* visible */589592690;

var local = /* local */-118437525;

var scroll = /* scroll */-949692403;

var paddingBox = /* paddingBox */972575930;

var borderBox = /* borderBox */9307263;

var contentBox = /* contentBox */-1008848302;

var noRepeat = /* noRepeat */-695430532;

var repeat = /* repeat */108828507;

var repeatX = /* repeatX */646437021;

var repeatY = /* repeatY */646437022;

var contain = /* contain */427065300;

var cover = /* cover */-899416265;

var row = /* row */5693978;

var rowReverse = /* rowReverse */378951208;

var column = /* column */-963948842;

var columnReverse = /* columnReverse */135477484;

var wrap = /* wrap */-822134326;

var nowrap = /* nowrap */867913355;

var wrapReverse = /* wrapReverse */-463121288;

var flexBox = /* flex */-1010954439;

var grid = /* grid */-999565626;

var inlineGrid = /* inlineGrid */64712127;

var block = /* block */888960333;

var inline = /* inline */423610969;

var inlineBlock = /* inlineBlock */-147785676;

var inlineFlex = /* inlineFlex */53323314;

var absolute = /* absolute */-1013592457;

var relative = /* relative */903134412;

var $$static = /* static */100392110;

var fixed = /* fixed */10615156;

var sticky = /* sticky */188263721;

var flexStart = /* flexStart */662439529;

var flexEnd = /* flexEnd */924268066;

var center = /* center */98248149;

var stretch = /* stretch */-162316795;

var spaceBetween = /* spaceBetween */516682146;

var spaceAround = /* spaceAround */-485895757;

var baseline = /* baseline */287825029;

var forwards = /* forwards */733653774;

var backwards = /* backwards */245861168;

var both = /* both */-1055160191;

var infinite = /* infinite */-630647084;

var paused = /* paused */-276545362;

var running = /* running */-345412097;

var inside = /* inside */501235708;

var outside = /* outside */-430011099;

var italic = /* italic */107228912;

var oblique = /* oblique */734792881;

var underline = /* underline */131142924;

var overline = /* overline */-986651832;

var lineThrough = /* lineThough */-512623793;

var clip = /* clip */-1044222256;

var ellipsis = /* ellipsis */166888785;

var wavy = /* wavy */-822975027;

var $$double = /* double */852175633;

var uppercase = /* uppercase */-415330030;

var lowercase = /* lowercase */-425349839;

var capitalize = /* capitalize */-509867604;

var sub = /* sub */5745024;

var $$super = /* super */79692155;

var textTop = /* textTop */516406248;

var textBottom = /* textBottom */476669816;

var middle = /* middle */-866200747;

var normal = /* normal */812216871;

var breakAll = /* breakAll */-323760734;

var keepAll = /* keepAll */892748188;

var breakWord = /* breakWord */1059921449;

var reverse = /* reverse */452737314;

var alternate = /* alternate */892586298;

var alternateReverse = /* alternateReverse */545428232;

var fill$1 = /* fill */-1011102077;

var content = /* content */427265337;

var maxContent = /* maxContent */60557045;

var minContent = /* minContent */-550577721;

var fitContent = /* fitContent */-195805336;

var all = /* all */4847905;

var text = /* text */-856044371;

var linear = /* linear */-325037595;

var ease = /* ease */-1022587922;

var easeIn = /* easeIn */138027891;

var easeOut = /* easeOut */715748672;

var easeInOut = /* easeInOut */-960651557;

var stepStart = /* stepStart */-193525386;

var stepEnd = /* stepEnd */20933615;

var round = /* round */-312084402;

var miter = /* miter */141361157;

var bevel = /* bevel */811681914;

var butt = /* butt */-1054861805;

var square = /* square */-655228771;

var unsafe = d;

var SVG = [
  fill,
  fillRule,
  fillOpacity,
  stroke,
  strokeLinecap,
  strokeLinejoin,
  strokeMiterlimit,
  strokeWidth,
  strokeOpacity,
  stopColor,
  stopOpacity
];

exports.empty = empty;
exports.merge = merge;
exports.style = style;
exports.important = important;
exports.label = label;
exports.deg = deg;
exports.rad = rad;
exports.grad = grad;
exports.turn = turn;
exports.rgb = rgb;
exports.rgba = rgba;
exports.hsl = hsl;
exports.hsla = hsla;
exports.hex = hex;
exports.transparent = transparent;
exports.currentColor = currentColor;
exports.linearGradient = linearGradient;
exports.repeatingLinearGradient = repeatingLinearGradient;
exports.radialGradient = radialGradient;
exports.repeatingRadialGradient = repeatingRadialGradient;
exports.aliceblue = aliceblue;
exports.antiquewhite = antiquewhite;
exports.aqua = aqua;
exports.aquamarine = aquamarine;
exports.azure = azure;
exports.beige = beige;
exports.bisque = bisque;
exports.black = black;
exports.blanchedalmond = blanchedalmond;
exports.blue = blue;
exports.blueviolet = blueviolet;
exports.brown = brown;
exports.burlywood = burlywood;
exports.cadetblue = cadetblue;
exports.chartreuse = chartreuse;
exports.chocolate = chocolate;
exports.coral = coral;
exports.cornflowerblue = cornflowerblue;
exports.cornsilk = cornsilk;
exports.crimson = crimson;
exports.cyan = cyan;
exports.darkblue = darkblue;
exports.darkcyan = darkcyan;
exports.darkgoldenrod = darkgoldenrod;
exports.darkgray = darkgray;
exports.darkgrey = darkgrey;
exports.darkgreen = darkgreen;
exports.darkkhaki = darkkhaki;
exports.darkmagenta = darkmagenta;
exports.darkolivegreen = darkolivegreen;
exports.darkorange = darkorange;
exports.darkorchid = darkorchid;
exports.darkred = darkred;
exports.darksalmon = darksalmon;
exports.darkseagreen = darkseagreen;
exports.darkslateblue = darkslateblue;
exports.darkslategray = darkslategray;
exports.darkslategrey = darkslategrey;
exports.darkturquoise = darkturquoise;
exports.darkviolet = darkviolet;
exports.deeppink = deeppink;
exports.deepskyblue = deepskyblue;
exports.dimgray = dimgray;
exports.dimgrey = dimgrey;
exports.dodgerblue = dodgerblue;
exports.firebrick = firebrick;
exports.floralwhite = floralwhite;
exports.forestgreen = forestgreen;
exports.fuchsia = fuchsia;
exports.gainsboro = gainsboro;
exports.ghostwhite = ghostwhite;
exports.gold = gold;
exports.goldenrod = goldenrod;
exports.gray = gray;
exports.grey = grey;
exports.green = green;
exports.greenyellow = greenyellow;
exports.honeydew = honeydew;
exports.hotpink = hotpink;
exports.indianred = indianred;
exports.indigo = indigo;
exports.ivory = ivory;
exports.khaki = khaki;
exports.lavender = lavender;
exports.lavenderblush = lavenderblush;
exports.lawngreen = lawngreen;
exports.lemonchiffon = lemonchiffon;
exports.lightblue = lightblue;
exports.lightcoral = lightcoral;
exports.lightcyan = lightcyan;
exports.lightgoldenrodyellow = lightgoldenrodyellow;
exports.lightgray = lightgray;
exports.lightgrey = lightgrey;
exports.lightgreen = lightgreen;
exports.lightpink = lightpink;
exports.lightsalmon = lightsalmon;
exports.lightseagreen = lightseagreen;
exports.lightskyblue = lightskyblue;
exports.lightslategray = lightslategray;
exports.lightslategrey = lightslategrey;
exports.lightsteelblue = lightsteelblue;
exports.lightyellow = lightyellow;
exports.lime = lime;
exports.limegreen = limegreen;
exports.linen = linen;
exports.magenta = magenta;
exports.maroon = maroon;
exports.mediumaquamarine = mediumaquamarine;
exports.mediumblue = mediumblue;
exports.mediumorchid = mediumorchid;
exports.mediumpurple = mediumpurple;
exports.mediumseagreen = mediumseagreen;
exports.mediumslateblue = mediumslateblue;
exports.mediumspringgreen = mediumspringgreen;
exports.mediumturquoise = mediumturquoise;
exports.mediumvioletred = mediumvioletred;
exports.midnightblue = midnightblue;
exports.mintcream = mintcream;
exports.mistyrose = mistyrose;
exports.moccasin = moccasin;
exports.navajowhite = navajowhite;
exports.navy = navy;
exports.oldlace = oldlace;
exports.olive = olive;
exports.olivedrab = olivedrab;
exports.orange = orange;
exports.orangered = orangered;
exports.orchid = orchid;
exports.palegoldenrod = palegoldenrod;
exports.palegreen = palegreen;
exports.paleturquoise = paleturquoise;
exports.palevioletred = palevioletred;
exports.papayawhip = papayawhip;
exports.peachpuff = peachpuff;
exports.peru = peru;
exports.pink = pink;
exports.plum = plum;
exports.powderblue = powderblue;
exports.purple = purple;
exports.rebeccapurple = rebeccapurple;
exports.red = red;
exports.rosybrown = rosybrown;
exports.royalblue = royalblue;
exports.saddlebrown = saddlebrown;
exports.salmon = salmon;
exports.sandybrown = sandybrown;
exports.seagreen = seagreen;
exports.seashell = seashell;
exports.sienna = sienna;
exports.silver = silver;
exports.skyblue = skyblue;
exports.slateblue = slateblue;
exports.slategray = slategray;
exports.slategrey = slategrey;
exports.snow = snow;
exports.springgreen = springgreen;
exports.steelblue = steelblue;
exports.tan = tan;
exports.teal = teal;
exports.thistle = thistle;
exports.tomato = tomato;
exports.turquoise = turquoise;
exports.violet = violet;
exports.wheat = wheat;
exports.white = white;
exports.whitesmoke = whitesmoke;
exports.yellow = yellow;
exports.yellowgreen = yellowgreen;
exports.ch = ch;
exports.cm = cm;
exports.em = em;
exports.ex = ex;
exports.fr = fr;
exports.mm = mm;
exports.pct = pct;
exports.pt = pt;
exports.px = px;
exports.rem = rem;
exports.vh = vh;
exports.vmax = vmax;
exports.vmin = vmin;
exports.vw = vw;
exports.zero = zero;
exports.Calc = Calc;
exports.size = size;
exports.solid = solid;
exports.dotted = dotted;
exports.dashed = dashed;
exports.localUrl = localUrl;
exports.url = url;
exports.none = none;
exports.auto = auto;
exports.hidden = hidden;
exports.visible = visible;
exports.local = local;
exports.scroll = scroll;
exports.paddingBox = paddingBox;
exports.borderBox = borderBox;
exports.contentBox = contentBox;
exports.noRepeat = noRepeat;
exports.repeat = repeat;
exports.repeatX = repeatX;
exports.repeatY = repeatY;
exports.contain = contain;
exports.cover = cover;
exports.row = row;
exports.rowReverse = rowReverse;
exports.column = column;
exports.columnReverse = columnReverse;
exports.wrap = wrap;
exports.nowrap = nowrap;
exports.wrapReverse = wrapReverse;
exports.flexBox = flexBox;
exports.grid = grid;
exports.inlineGrid = inlineGrid;
exports.block = block;
exports.inline = inline;
exports.inlineBlock = inlineBlock;
exports.inlineFlex = inlineFlex;
exports.absolute = absolute;
exports.relative = relative;
exports.$$static = $$static;
exports.fixed = fixed;
exports.sticky = sticky;
exports.flexStart = flexStart;
exports.flexEnd = flexEnd;
exports.center = center;
exports.stretch = stretch;
exports.spaceBetween = spaceBetween;
exports.spaceAround = spaceAround;
exports.baseline = baseline;
exports.forwards = forwards;
exports.backwards = backwards;
exports.both = both;
exports.infinite = infinite;
exports.count = count;
exports.paused = paused;
exports.running = running;
exports.inside = inside;
exports.outside = outside;
exports.translate = translate;
exports.translate3d = translate3d;
exports.translateX = translateX;
exports.translateY = translateY;
exports.translateZ = translateZ;
exports.scale = scale;
exports.scale3d = scale3d;
exports.scaleX = scaleX;
exports.scaleY = scaleY;
exports.scaleZ = scaleZ;
exports.rotate = rotate;
exports.rotate3d = rotate3d;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.skew = skew;
exports.skewX = skewX;
exports.skewY = skewY;
exports.italic = italic;
exports.oblique = oblique;
exports.underline = underline;
exports.overline = overline;
exports.lineThrough = lineThrough;
exports.clip = clip;
exports.ellipsis = ellipsis;
exports.wavy = wavy;
exports.$$double = $$double;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.sub = sub;
exports.$$super = $$super;
exports.textTop = textTop;
exports.textBottom = textBottom;
exports.middle = middle;
exports.normal = normal;
exports.breakAll = breakAll;
exports.keepAll = keepAll;
exports.breakWord = breakWord;
exports.reverse = reverse;
exports.alternate = alternate;
exports.alternateReverse = alternateReverse;
exports.fill = fill$1;
exports.content = content;
exports.maxContent = maxContent;
exports.minContent = minContent;
exports.fitContent = fitContent;
exports.all = all;
exports.text = text;
exports.linear = linear;
exports.ease = ease;
exports.easeIn = easeIn;
exports.easeOut = easeOut;
exports.easeInOut = easeInOut;
exports.stepStart = stepStart;
exports.stepEnd = stepEnd;
exports.steps = steps;
exports.cubicBesier = cubicBesier;
exports.round = round;
exports.miter = miter;
exports.bevel = bevel;
exports.butt = butt;
exports.square = square;
exports.unsafe = unsafe;
exports.display = display;
exports.position = position;
exports.top = top;
exports.bottom = bottom;
exports.left = left;
exports.right = right;
exports.flex = flex;
exports.flexGrow = flexGrow;
exports.flexShrink = flexShrink;
exports.flexBasis = flexBasis;
exports.flexDirection = flexDirection;
exports.flexWrap = flexWrap;
exports.order = order;
exports.gridTemplateColumns = gridTemplateColumns;
exports.gridTemplateRows = gridTemplateRows;
exports.gridAutoRows = gridAutoRows;
exports.gridColumn = gridColumn;
exports.gridRow = gridRow;
exports.gridColumnStart = gridColumnStart;
exports.gridColumnEnd = gridColumnEnd;
exports.gridRowStart = gridRowStart;
exports.gridRowEnd = gridRowEnd;
exports.gridColumnGap = gridColumnGap;
exports.gridRowGap = gridRowGap;
exports.gridGap = gridGap;
exports.width = width;
exports.minWidth = minWidth;
exports.maxWidth = maxWidth;
exports.height = height;
exports.minHeight = minHeight;
exports.maxHeight = maxHeight;
exports.margin = margin;
exports.margin2 = margin2;
exports.margin3 = margin3;
exports.margin4 = margin4;
exports.marginLeft = marginLeft;
exports.marginRight = marginRight;
exports.marginTop = marginTop;
exports.marginBottom = marginBottom;
exports.padding = padding;
exports.padding2 = padding2;
exports.padding3 = padding3;
exports.padding4 = padding4;
exports.paddingLeft = paddingLeft;
exports.paddingRight = paddingRight;
exports.paddingTop = paddingTop;
exports.paddingBottom = paddingBottom;
exports.alignContent = alignContent;
exports.alignItems = alignItems;
exports.alignSelf = alignSelf;
exports.justifyContent = justifyContent;
exports.boxSizing = boxSizing;
exports.$$float = $$float;
exports.clear = clear;
exports.overflow = overflow;
exports.overflowX = overflowX;
exports.overflowY = overflowY;
exports.zIndex = zIndex;
exports.backfaceVisibility = backfaceVisibility;
exports.visibility = visibility;
exports.border = border;
exports.borderWidth = borderWidth;
exports.borderStyle = borderStyle;
exports.borderColor = borderColor;
exports.borderTop = borderTop;
exports.borderTopWidth = borderTopWidth;
exports.borderTopStyle = borderTopStyle;
exports.borderTopColor = borderTopColor;
exports.borderBottom = borderBottom;
exports.borderBottomWidth = borderBottomWidth;
exports.borderBottomStyle = borderBottomStyle;
exports.borderBottomColor = borderBottomColor;
exports.borderLeft = borderLeft;
exports.borderLeftWidth = borderLeftWidth;
exports.borderLeftStyle = borderLeftStyle;
exports.borderLeftColor = borderLeftColor;
exports.borderRight = borderRight;
exports.borderRightWidth = borderRightWidth;
exports.borderRightStyle = borderRightStyle;
exports.borderRightColor = borderRightColor;
exports.borderRadius = borderRadius;
exports.borderTopLeftRadius = borderTopLeftRadius;
exports.borderTopRightRadius = borderTopRightRadius;
exports.borderBottomLeftRadius = borderBottomLeftRadius;
exports.borderBottomRightRadius = borderBottomRightRadius;
exports.tableLayout = tableLayout;
exports.borderCollapse = borderCollapse;
exports.borderSpacing = borderSpacing;
exports.boxShadow = boxShadow;
exports.boxShadows = boxShadows;
exports.background = background;
exports.backgroundColor = backgroundColor;
exports.backgroundImage = backgroundImage;
exports.backgroundAttachment = backgroundAttachment;
exports.backgroundClip = backgroundClip;
exports.backgroundOrigin = backgroundOrigin;
exports.backgroundPosition = backgroundPosition;
exports.backgroundRepeat = backgroundRepeat;
exports.backgroundSize = backgroundSize;
exports.cursor = cursor;
exports.clipPath = clipPath;
exports.listStyle = listStyle;
exports.listStyleType = listStyleType;
exports.listStylePosition = listStylePosition;
exports.listStyleImage = listStyleImage;
exports.opacity = opacity;
exports.outline = outline;
exports.outlineStyle = outlineStyle;
exports.outlineWidth = outlineWidth;
exports.outlineColor = outlineColor;
exports.outlineOffset = outlineOffset;
exports.pointerEvents = pointerEvents;
exports.color = color;
exports.fontFamily = fontFamily;
exports.fontFace = fontFace;
exports.fontSize = fontSize;
exports.fontVariant = fontVariant;
exports.fontStyle = fontStyle;
exports.fontWeight = fontWeight;
exports.letterSpacing = letterSpacing;
exports.lineHeight = lineHeight;
exports.textAlign = textAlign;
exports.textDecoration = textDecoration;
exports.textDecorationColor = textDecorationColor;
exports.textDecorationStyle = textDecorationStyle;
exports.textIndent = textIndent;
exports.textOverflow = textOverflow;
exports.textShadow = textShadow;
exports.textTransform = textTransform;
exports.userSelect = userSelect;
exports.verticalAlign = verticalAlign;
exports.whiteSpace = whiteSpace;
exports.wordBreak = wordBreak;
exports.wordSpacing = wordSpacing;
exports.wordWrap = wordWrap;
exports.transform = transform;
exports.transforms = transforms;
exports.transformOrigin = transformOrigin;
exports.transformOrigin3d = transformOrigin3d;
exports.transformStyle = transformStyle;
exports.perspective = perspective;
exports.perspectiveOrigin = perspectiveOrigin;
exports.transition = transition;
exports.transitions = transitions;
exports.transitionDelay = transitionDelay;
exports.transitionDuration = transitionDuration;
exports.transitionTimingFunction = transitionTimingFunction;
exports.transitionProperty = transitionProperty;
exports.keyframes = keyframes;
exports.animationBody = animationBody;
exports.animation = animation;
exports.animations = animations;
exports.animationDelay = animationDelay;
exports.animationDirection = animationDirection;
exports.animationDuration = animationDuration;
exports.animationFillMode = animationFillMode;
exports.animationIterationCount = animationIterationCount;
exports.animationName = animationName;
exports.animationPlayState = animationPlayState;
exports.animationTimingFunction = animationTimingFunction;
exports.selector = selector;
exports.active = active;
exports.after = after;
exports.before = before;
exports.checked = checked;
exports.children = children;
exports.directSibling = directSibling;
exports.disabled = disabled;
exports.firstChild = firstChild;
exports.firstOfType = firstOfType;
exports.focus = focus;
exports.hover = hover;
exports.lastChild = lastChild;
exports.lastOfType = lastOfType;
exports.link = link;
exports.readOnly = readOnly;
exports.required = required;
exports.visited = visited;
exports.enabled = enabled;
exports.noContent = noContent;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.anyLink = anyLink;
exports.onlyChild = onlyChild;
exports.onlyOfType = onlyOfType;
exports.optional = optional;
exports.invalid = invalid;
exports.outOfRange = outOfRange;
exports.siblings = siblings;
exports.target = target;
exports.firstLine = firstLine;
exports.firstLetter = firstLetter;
exports.selection = selection;
exports.placeholder = placeholder;
exports.media = media;
exports.SVG = SVG;
/* Js_dict Not a pure module */
